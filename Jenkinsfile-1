pipeline {
    agent any // This pipeline can run on any available agent
      environment {
        JAR_FILE = '' // Environment variable to store the path of the built JAR file
    }

    stages {
        stage('Prepare') {
            steps {
                deleteDir()  // Deletes the current directory to ensure a clean start
            
            }
        }
        stage('SCM') {
            steps {
                checkout scm // Checks out source code from the SCM repository configured in Jenkins
            }
        }
        stage('Compile') {
            steps {
                sh './mvnw clean' // Runs Maven's clean command to remove target directory
                sh './mvnw compile' // Compiles the source code using Maven
            }
        }

        // stage('SonarQube Analysis') { // Code analysis stage using SonarQube
        //     environment {
        //         SCANNER_HOME = tool 'sonar-scanner' // Sets the SonarQube scanner tool
        //         NODEJS_HOME = tool 'nodejs' // Sets the Node.js tool for JavaScript analysis
        //         PATH = "${env.NODEJS_HOME}/bin:${env.PATH}" // Updates PATH to include Node.js binaries
        //         mvn = tool 'M3' // Sets Maven tool
        //     }
        //     steps {
        //         withSonarQubeEnv('sq1') {
        //             sh "${mvn}/bin/mvn sonar:sonar -Dsonar.projectKey=Web -Dsonar.projectName='Web' -Dsonar.sources=src/ -Dsonar.java.binaries=target/classes/ -Dsonar.exclusions=src/test/java/****/*.java"
        //         // Runs Maven SonarQube analysis with specified parameters
        //         }
        //     }
        // }

        stage('Build JAR') { // Jar building stage
            steps {
                sh './mvnw package' // Packages the application into a JAR file using Maven
            }
            post {
                success {
                    archiveArtifacts 'target/*.jar' // Archives the JAR file if the build is successful
                    script {
                        JAR_FILE = sh(script: "ls target/*.jar", returnStdout: true).trim() // Stores the path of the JAR file in an environment variable
                    }
                }
            }
        }
        stage('Deploy via Ansible'){ // Deployment stage
            steps {
                
                ansiblePlaybook installation: 'ansible', inventory: 'inventory.ini', playbook: 'playbook.yaml', vaultTmpPath: '', disableHostKeyChecking: true, extras: "-e jar_path=${env.JAR_FILE}"
                // Starts the JAR application in the background, redirecting output to a log file

                
            }
        }
    }
}
